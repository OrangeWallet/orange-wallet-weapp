{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ecpair_1 = __importDefault(require(\"@nervosnetwork/ckb-sdk-utils/lib/ecpair\"));\nconst utils = __importStar(require(\"@nervosnetwork/ckb-sdk-utils\"));\nconst { hexToBytes, pubkeyToAddress, blake160, AddressPrefix, AddressType, AddressBinIdx } = utils;\nclass Address extends ecpair_1.default {\n    constructor(sk, { addressAlgorithm = pubkeyToAddress, prefix = AddressPrefix.Testnet, type = AddressType.BinIdx, binIdx = AddressBinIdx.P2PH, } = {\n        addressAlgorithm: pubkeyToAddress,\n        prefix: AddressPrefix.Testnet,\n        type: AddressType.BinIdx,\n        binIdx: AddressBinIdx.P2PH,\n    }) {\n        super(typeof sk === 'string' ? hexToBytes(sk) : sk);\n        this.value = '';\n        this.idenfitier = '';\n        this.value = addressAlgorithm(this.publicKey, {\n            prefix,\n            type,\n            binIdx,\n        });\n        this.idenfitier = blake160(this.publicKey, 'hex');\n    }\n}\nexports.default = Address;\n//# sourceMappingURL=index.js.map"]}